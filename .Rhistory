install.packages("renv")
renv::init()
install.packages(c("jsonlite", "dplyr", "ggplot2", "readr", "stringr"))
renv::snapshot()
library(jsonlite); library(dplyr); library(stringr)
# helper to parse facts from the request prompt ---------------------------
parse_facts <- function(txt) {
tibble(
gender  = str_match(txt, "gender:\\s*(\\w+)")[,2],
age     = as.integer(str_match(txt, "age:\\s*(\\d+)")[,2]),
smoker  = str_match(txt, "smoker:\\s*(Yes|No)")[,2],
drinker = str_match(txt, "drinker:\\s*(Yes|No)")[,2],
bp      = str_match(txt, "BP:\\s*([0-9/]+)")[,2],
cc      = str_match(txt, 'chief complaint:\\s*"([^"]+)"')[,2]
)
}
# ------------ read request lines (facts) ---------------------------------
req <- stream_in(file("batch_files/batch_input.jsonl")) |>
mutate(row_id = custom_id,
prompt = body$messages[[1]]$content) |>
bind_cols(parse_facts(.$prompt)) |>
select(row_id, gender, age, smoker, drinker,
blood_pressure = bp, chief_complaint = cc)
library(jsonlite); library(dplyr); library(stringr)
# helper to parse facts from the request prompt ---------------------------
parse_facts <- function(txt) {
tibble(
gender  = str_match(txt, "gender:\\s*(\\w+)")[,2],
age     = as.integer(str_match(txt, "age:\\s*(\\d+)")[,2]),
smoker  = str_match(txt, "smoker:\\s*(Yes|No)")[,2],
drinker = str_match(txt, "drinker:\\s*(Yes|No)")[,2],
bp      = str_match(txt, "BP:\\s*([0-9/]+)")[,2],
cc      = str_match(txt, 'chief complaint:\\s*"([^"]+)"')[,2]
)
}
# ------------ read request lines (facts) ---------------------------------
req <- stream_in(file("batch_files/batch_input.jsonl")) |>
mutate(row_id = custom_id,
prompt = body$messages[[1]]$content) |>
bind_cols(parse_facts(.$prompt)) |>
select(row_id, gender, age, smoker, drinker,
blood_pressure = bp, chief_complaint = cc)
req <- req %>%
mutate(
row_id = custom_id,
prompt = map_chr(body, ~ .x$messages[[1]]$content)
) %>%
bind_cols(parse_facts(req$prompt)) %>%   # <- use the new column
select(row_id, gender, age, smoker, drinker,
blood_pressure = bp, chief_complaint = cc)
clean
clean()
clear()
req <- req %>%
mutate(
row_id = custom_id,
prompt = map_chr(body, ~ .x$messages[[1]]$content)
) %>%
bind_cols(parse_facts(req$prompt)) %>%   # <- use the new column
select(row_id, gender, age, smoker, drinker,
blood_pressure = bp, chief_complaint = cc)
library(jsonlite)
library(dplyr)
library(stringr)
library(purrr)          # for map / map_chr
parse_facts <- function(txt) {
tibble(
gender  = str_match(txt, "gender:\\s*(\\w+)")[,2],
age     = as.integer(str_match(txt, "age:\\s*(\\d+)")[,2]),
smoker  = str_match(txt, "smoker:\\s*(Yes|No)")[,2],
drinker = str_match(txt, "drinker:\\s*(Yes|No)")[,2],
bp      = str_match(txt, "BP:\\s*([0-9/]+)")[,2],
cc      = str_match(txt, 'chief complaint:\\s*"([^"]+)"')[,2]
)
}
# ---------- 1. requests (facts) ----------
req_raw   <- stream_in(file("batch_files/batch_input.jsonl"))
prompts   <- map_chr(req_raw$body, ~ .x$messages[[1]]$content)
library(jsonlite); library(dplyr); library(stringr); library(purrr)
parse_facts <- function(txt) {
tibble(
gender  = str_match(txt, "gender:\\s*(\\w+)")[,2],
age     = as.integer(str_match(txt, "age:\\s*(\\d+)")[,2]),
smoker  = str_match(txt, "smoker:\\s*(Yes|No)")[,2],
drinker = str_match(txt, "drinker:\\s*(Yes|No)")[,2],
bp      = str_match(txt, "BP:\\s*([0-9/]+)")[,2],
cc      = str_match(txt, 'chief complaint:\\s*"([^"]+)"')[,2]
)
}
# ---------- 1. load requests *without* simplification ----------
req_list <- stream_in(
file("batch_files/batch_input.jsonl"),
simplifyVector = FALSE
)
row_id   <- map_chr(req_list, "custom_id")
prompts  <- map_chr(req_list, ~ .x$body$messages[[1]]$content)
facts    <- parse_facts(prompts)
req <- tibble(row_id = row_id) %>% bind_cols(facts)
# ---------- 2. load responses (same as before) ----------
resp <- stream_in(file("soap_batch/soap_output.jsonl")) %>%
filter(response$status_code == 200) %>%
mutate(row_id = custom_id,
soap = map(response$body,
~ fromJSON(.x$choices[[1]]$message$content))) %>%
tidyr::unnest_wider(soap)
nrow(df)
nrow(df)
library(jsonlite)
df <- stream_in(file("data/synthetic_patients_with_soap.jsonl"))
nrow(df)
source("D:/dev/remote-health-ai-dataset/analysis_r/00_quick_check.R")
png("figures/age_hist.png", width = 600, height = 400)
hist(df$age,
breaks = 15,
col    = "#4B9CD3",
main   = "Age distribution",
xlab   = "Age", ylab = "Count")
dev.off()
cat("Synthetic dataset supports TinyLLaMA training for SOAP note generation.\n")
source("D:/dev/remote-health-ai-dataset/analysis_r/00_quick_check.R")
# Load required libraries
library(jsonlite)
library(dplyr)
library(ggplot2)
library(tidyr)
# Create output directory for data and plots
dir.create("data", showWarnings = FALSE)
# 2. Load Datasets
# Primary dataset: synthetic_patients_with_soap.jsonl
patients <- stream_in(file("data/synthetic_patients_with_soap.jsonl"), verbose = FALSE)
# Augmented dataset: soap_augmented.jsonl (paraphrased SOAP sections)
augmented <- stream_in(file("data/soap_augmented.jsonl"), verbose = FALSE)
# Display dataset structure
cat("Structure of primary dataset:\n")
str(patients, max.level = 1)
cat("\nStructure of augmented dataset:\n")
str(augmented, max.level = 1)
# 3. Demographic Distribution
# Summarize gender, age, smoker, and drinker distributions
demo_summary <- patients %>%
summarise(
Gender = paste(names(table(gender)), collapse = ", "),
Age_Range = paste(range(age), collapse = " to "),
Smoker = paste(names(table(smoker)), collapse = ", "),
Drinker = paste(names(table(drinker)), collapse = ", ")
)
cat("\nDemographic Summary:\n")
print(demo_summary)
# Plot age distribution
png("data/age_distribution.png", width = 800, height = 600)
ggplot(patients, aes(x = age)) +
geom_histogram(binwidth = 5, fill = "blue", alpha = 0.6) +
labs(title = "Age Distribution of Synthetic Patients", x = "Age", y = "Count") +
theme_minimal()
dev.off()
cat("Saved age distribution plot to data/age_distribution.png\n")
# 4. Chief Complaints
# Summarize top 10 chief complaints
cc_freq <- patients %>%
count(chief_complaint, sort = TRUE) %>%
slice_head(n = 10)
cat("\nTop 10 Chief Complaints:\n")
print(cc_freq)
# Plot top 10 chief complaints
png("data/chief_complaints.png", width = 800, height = 600)
ggplot(cc_freq, aes(x = reorder(chief_complaint, -n), y = n)) +
geom_bar(stat = "identity", fill = "green", alpha = 0.6) +
labs(title = "Top 10 Chief Complaints", x = "Complaint", y = "Frequency") +
theme_minimal() +
coord_flip()
dev.off()
cat("Saved chief complaints plot to data/chief_complaints.png\n")
# 5. SOAP Notes Summary
# Summarize augmented SOAP section formats
aug_format <- augmented %>%
count(format, section)
cat("\nAugmented SOAP Section Formats:\n")
print(aug_format)
# 6. Data Preprocessing
# Split augmented dataset into four subsets for Subjective, Objective, Assessment, Plan
subjective <- augmented %>% filter(section == "subjective") %>% select(row_id, text)
objective <- augmented %>% filter(section == "objective") %>% select(row_id, text)
assessment <- augmented %>% filter(section == "assessment") %>% select(row_id, text)
plan <- augmented %>% filter(section == "plan") %>% select(row_id, text)
# Save preprocessed datasets
write_json(subjective, "data/subjective.jsonl", auto_unbox = TRUE, pretty = TRUE)
write_json(objective, "data/objective.jsonl", auto_unbox = TRUE, pretty = TRUE)
write_json(assessment, "data/assessment.jsonl", auto_unbox = TRUE, pretty = TRUE)
write_json(plan, "data/plan.jsonl", auto_unbox = TRUE, pretty = TRUE)
cat("Saved preprocessed datasets to data/subjective.jsonl, data/objective.jsonl, data/assessment.jsonl, data/plan.jsonl\n")
cat("\nBias and Uncertainties Notes:\n")
cat("Demographic bias: Random assignments may skew predictions; validate with real data.\n")
cat("Synthetic data: May lack real-world variability; mitigated by augmentation.\n")
cat("Uncertainties: Real-world performance, overfitting, and quantization effects need testing.\n")
cat("\nFine-Tuning Notes:\n")
cat("Model: TinyLLaMA (1.1B parameters), quantized to 4-bit for Raspberry Pi 5.\n")
cat("Process: Train four models on subjective, objective, assessment, plan datasets.\n")
cat("Rationale: Specialization enhances accuracy and efficiency on low-power hardware.\n")
cat("\nEthical Considerations:\n")
cat("Privacy: Synthetic data; deploy with AES-256 encryption.\n")
cat("Bias: Audit outputs for fairness.\n")
cat("Oversight: Clinician validation required.\n")
cat("Transparency: Public script and data for critique.\n")
cat("\nConclusion:\n")
cat("Synthetic dataset supports TinyLLaMA training for SOAP note generation.\n")
cat("Transparent analysis invites critique to improve rural healthcare AI.\n")
cat("\nReproducibility Instructions:\n")
cat("1. Install R, jsonlite, dplyr, ggplot2, tidyr.\n")
cat("2. Place datasets in data/ directory.\n")
cat("3. Run script in RStudio.\n")
cat("4. Fine-tune with Hugging Face Transformers.\n")
# End of script
cat("Analysis complete. Outputs saved in data/ directory.\n")
install.packages(c("jsonlite", "dplyr", "ggplot2", "tidyr"))
View(facts)
View(req_list)
View(req_raw)
View(req_list)
View(req_list)
View(req)
View(patients)
View(cc_freq)
View(demo_summary)
View(df)
View(facts)
View(patients)
